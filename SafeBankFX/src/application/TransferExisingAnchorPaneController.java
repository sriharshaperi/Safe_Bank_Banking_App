package application;

import java.io.IOException;
import java.net.URL;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.ResourceBundle;
import java.util.stream.Collectors;

import dao.BeneficiaryUsersDAO;
import dao.SavingsAccountsDAO;
import dao.UsersDAO;
import enums.TransactionCategory;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.fxml.Initializable;
import javafx.scene.control.Button;
import javafx.scene.control.ComboBox;
import javafx.scene.control.TextField;
import models.BeneficiaryUser;
import models.SavingsAccount;
import models.Transaction;
import models.User;
import notifications.EmailService;
import transactions.BeneficiaryTransferTransaction;
import utils.SavingsAccountUtils;
import utils.TransactionUtils;
import validations.TransactionValidations;

public class TransferExisingAnchorPaneController extends Controller implements Initializable {
	@FXML
	private ComboBox<String> cbBenName;
	@FXML
	private ComboBox<String> cbBenAccNums;
	@FXML
	private ComboBox<String> cbCurrentUserAcctNum;
	@FXML
	private TextField txtAmount;
	@FXML
	private Button btnTransferFunds;
	@FXML
	private Button btnResetEmail;
	@FXML
	private Button btnResetAcctNum;
	@FXML
	private Button btnResetCurrentUserAcctNum;
	
	private Map<String, Long> displayAccountNumbersMapping;
	private String selectedDisplayAccountNumber;
	private SavingsAccount currentSelectedAccount;
	
	private Map<String, Long> displayBeneficiaryAccountNumbersMapping;
	private String selectedDisplayBeneficiaryAccountNumber;
	private String selectedDisplayBeneficiaryEmail;
	private SavingsAccount currentSelectedBeneficiaryAccount;
	
	private int incorrectOTPAttempts;
	private int invalidOTPAttemptsCount;

	// Event Listener on ComboBox[#cbBenName].onAction
	@FXML
	public void displayAddedBeneficiaryNames(ActionEvent event) throws IOException {
		// TODO Autogenerated
		selectedDisplayBeneficiaryEmail = cbBenName.getSelectionModel().getSelectedItem();
		if(selectedDisplayBeneficiaryEmail != null) {
			cbBenAccNums.setVisible(true);
			
			User beneficiaryDetails = UsersDAO.getUserByEmail(selectedDisplayBeneficiaryEmail);
			String beneficiaryUserId = beneficiaryDetails.getUserId().toString();
			
			List<SavingsAccount> beneficiarySavingsAccounts = 
					SavingsAccountsDAO.getUserSavingsAccounts(beneficiaryUserId);
			
			displayBeneficiaryAccountNumbersMapping = new HashMap<>();
			List<String> beneficiaryAccountNumbers = 
					beneficiarySavingsAccounts
					.stream()
	        		.map(savingsAccount -> {
	        			Long accountNumber = savingsAccount.getAccountNumber();
	        			String displayAccountNumber = SavingsAccountUtils.getLastFourDigitsOf(accountNumber);
	        			displayBeneficiaryAccountNumbersMapping.put(displayAccountNumber, accountNumber);
	        			return displayAccountNumber;
	        		}).collect(Collectors.toList());
			
			ObservableList<String> beneficiarySavingsAccountsList = 
	        		FXCollections.observableArrayList(beneficiaryAccountNumbers);
			
			cbBenAccNums.setItems(beneficiarySavingsAccountsList);
			btnResetEmail.setVisible(true);
			if(btnResetAcctNum.isVisible() || 
					btnResetCurrentUserAcctNum.isVisible()) {
				
				if(btnResetAcctNum.isVisible()) {
					cbBenAccNums.setButtonCell(new PromptButtonCell<>(cbBenAccNums.getPromptText()));
					btnResetAcctNum.setVisible(false);
					clearSelectedAccountNumberValue(event);
				}
				
				if(btnResetCurrentUserAcctNum.isVisible()) {
					cbCurrentUserAcctNum.setButtonCell(new PromptButtonCell<>(cbCurrentUserAcctNum.getPromptText()));
					btnResetCurrentUserAcctNum.setVisible(false);
					clearSelectedCurrentUserAccountNumberValue(event);
				}
			}
				
		}
	}
	// Event Listener on ComboBox[#cbBenAccNums].onAction
	@FXML
	public void displayBeneficiaryAccNumbers(ActionEvent event) throws IOException {
		// TODO Autogenerated
		
		selectedDisplayBeneficiaryAccountNumber = cbBenAccNums.getSelectionModel().getSelectedItem();
		if(selectedDisplayBeneficiaryAccountNumber != null) {
			btnResetAcctNum.setVisible(true);
			
			displayAccountNumbersMapping = new HashMap<>();
			List<String> accountNumbers = user.getAccounts().stream().map(account -> {
				long accountNumber = account.getAccountNumber();
				String displayAccountNumber = SavingsAccountUtils.getLastFourDigitsOf(accountNumber);
				displayAccountNumbersMapping.put(displayAccountNumber, accountNumber);
				return displayAccountNumber;
			}).collect(Collectors.toList());
			
			ObservableList<String> accountNumbersList = 
					FXCollections.observableArrayList(accountNumbers);
			cbCurrentUserAcctNum.setItems(accountNumbersList);
			cbCurrentUserAcctNum.setVisible(true);
			if(btnResetCurrentUserAcctNum.isVisible()) {
				cbCurrentUserAcctNum.setButtonCell(new PromptButtonCell<>(cbCurrentUserAcctNum.getPromptText()));
				btnResetCurrentUserAcctNum.setVisible(false);
				clearSelectedCurrentUserAccountNumberValue(event);
			}
		}
	}
	
	@FXML
	public void displayCurrentUserAccountNumbers(ActionEvent event) {
		
		selectedDisplayAccountNumber = cbCurrentUserAcctNum.getSelectionModel().getSelectedItem();
		if(selectedDisplayAccountNumber != null) {
			btnTransferFunds.setVisible(true);
			txtAmount.setVisible(true);
			btnResetCurrentUserAcctNum.setVisible(true);
			long accountNumber = displayAccountNumbersMapping.get(selectedDisplayAccountNumber);
			currentSelectedAccount = 
					SavingsAccountsDAO
					.getSavingsAccountByAccountNumber(accountNumber);
			
		}
	}
	
	

	// Event Listener on Button[#btnTransferFunds].onAction
	@FXML
	public void handleTransferFundsAction(ActionEvent event) throws Exception {
		// TODO Autogenerated
		String title = null;
		String headerText = null;
		String contentText = null;
		
		String amountTextFieldValue = txtAmount.getText();
		String amountValidationStatus = TransactionValidations.
				isAmountValidForTransfer(amountTextFieldValue, currentSelectedAccount);
		if(amountValidationStatus.equals("invalid")) {
			headerText = "Amount is Invalid. Enter a valid numerical value";
			AlertController.showError(title, headerText, contentText);
			return;
		}
		else if(amountValidationStatus.equals("insufficient_funds")) {
			headerText = "Insufficient funds in your account";
			if(user.getAccounts().size() > 0)
			contentText = "Choose a different account of yours for transfering the funds to beneficiary";
			AlertController.showError(title, headerText, contentText);
			return;
		}
		else if(amountValidationStatus.equals("exceeded_limit")) {
			headerText = "Amount exceeded the limit. You cannot transfer more than USD 100000";
			AlertController.showError(title, headerText, contentText);
			return;
		}
		else if(amountValidationStatus.equals("valid")) {
			
			String toEmail = null;
			String emailSubject = null;
			String emailMessage = null;
			
			toEmail = user.getEmail();
			emailSubject = "OTP for Online Account Payment Transaction";
			emailMessage = "Your OTP for this transaction : ";
			
			int generatedOTP = TransactionUtils.generateOTP();
			Date generatedOTPTimestamp = new Date();
			EmailService.sendEmail(toEmail, emailSubject, emailMessage + generatedOTP);
			String OTP = DialogController
					.getEnteredOTPInputForTransaction(TransactionCategory.ONLINE_PAYMENT);
			boolean isValidOTP = TransactionValidations.isOTPValid(OTP, generatedOTPTimestamp);
			System.out.println("Is OTP Valid : " + isValidOTP);
			if (isValidOTP) {
				int enteredOTP = Integer.parseInt(OTP);
				if (enteredOTP == generatedOTP) {
					double amount = Double.parseDouble(amountTextFieldValue);
					
					Long accountNumberBeneficiary = displayBeneficiaryAccountNumbersMapping.get(selectedDisplayBeneficiaryAccountNumber);
					currentSelectedBeneficiaryAccount = SavingsAccountsDAO
							.getSavingsAccountByAccountNumber(accountNumberBeneficiary);
					
					Long accountNumberCurrent = displayAccountNumbersMapping.get(selectedDisplayAccountNumber);
					currentSelectedAccount = SavingsAccountsDAO
							.getSavingsAccountByAccountNumber(accountNumberCurrent);
					
					User beneficiaryUser = UsersDAO.getUserByEmail(selectedDisplayBeneficiaryEmail);
					String senderUserId = user.getUserId().toString();
					String senderAccountId = currentSelectedAccount.getAccountId().toString();
					String receiverUserId = beneficiaryUser.getUserId().toString();
					String receiverAccountId = currentSelectedBeneficiaryAccount.getAccountId().toString();
					
					BeneficiaryTransferTransaction beneficiaryTransferTransaction = 
							new BeneficiaryTransferTransaction();
					beneficiaryTransferTransaction.setAmount(amount);
					beneficiaryTransferTransaction.setSenderUserId(senderUserId);
					beneficiaryTransferTransaction.setReceiverUserId(receiverUserId);
					beneficiaryTransferTransaction.setSenderAccountId(senderAccountId);
					beneficiaryTransferTransaction.setReceiverAccountId(receiverAccountId);
					
					beneficiaryTransferTransaction.transferToBeneficiary();
					
					headerText = "Successfully transferred "+amount+" from account your "
							+ ""+selectedDisplayAccountNumber+" to beneficiary account "+selectedDisplayBeneficiaryAccountNumber;
					AlertController.showConfirmation(title, headerText, contentText);
					
					String benUserToEmail = selectedDisplayBeneficiaryEmail;
					String benUserEmailSubject = "Transfer From User "+user.getEmail();
					String benUserEmailMessage = "You have received a transfer of USD "+amount+""
							+ " from "+user.getEmail()+"\n"
									+ "From Account : "+selectedDisplayAccountNumber+"\n"
									+ "To Account : "+selectedDisplayBeneficiaryAccountNumber;
					
					String currUserToEmail = user.getEmail();
					String currUserEmailSubject = "Transfer to account "+selectedDisplayBeneficiaryAccountNumber;
					String currUserEmailMessage = "You have transferred USD "+amount+""
							+ " to "+selectedDisplayBeneficiaryEmail+"\n"
							+ "From Account : "+selectedDisplayAccountNumber+"\n"
							+ "To Account : "+selectedDisplayBeneficiaryAccountNumber;
					
					EmailService.sendEmail(currUserToEmail, currUserEmailSubject, currUserEmailMessage);
					EmailService.sendEmail(benUserToEmail, benUserEmailSubject, benUserEmailMessage);
					SwitchSceneController.invokeLayout(event, SceneFiles.TRANSACTIONS_SCENE_LAYOUT);
				}
				else {
					title = "Incorrect OTP";
					headerText = "*** Incorrect OTP. Transaction Declined. " + "Attempts Remaining : "
							+ (2 - incorrectOTPAttempts) + "***";
					incorrectOTPAttempts += 1;
					if (incorrectOTPAttempts == 2) {
						title = "Transaction Blocked";
						headerText = "*** You have reached maximum allowed attempts ***";
						contentText = "For security reasons, you will be signed out";
						if(isSessionActive) {
							isSessionActive = false;
							user = null;
						}
						AlertController.showError(title, headerText, contentText);
						SwitchSceneController.invokeLayout(event, SceneFiles.LOGIN_SCENE_LAYOUT);
					}
				}
			}
			else {
				title = "Invalid OTP";
				headerText = "*** Invalid OTP. " + "Transaction Declined. Attempts Remaining : "
						+ (2 - invalidOTPAttemptsCount) + " ***";
				invalidOTPAttemptsCount += 1;
				if (invalidOTPAttemptsCount == 2) {
					title = "Transaction Blocked";
					headerText = "*** You have reached maximum allowed attempts ***";
					contentText = "For security reasons, you will be signed out";
					if(isSessionActive) {
						isSessionActive = false;
						user = null;
					}
					AlertController.showError(title, headerText, contentText);
					SwitchSceneController.invokeLayout(event, SceneFiles.LOGIN_SCENE_LAYOUT);
				}
			}
		}
	}
	
	@FXML
	public void clearSelectedCurrentUserAccountNumberValue(ActionEvent event) throws IOException {
		// TODO Autogenerated
		cbCurrentUserAcctNum.getSelectionModel().clearSelection();
		cbCurrentUserAcctNum.setButtonCell(new PromptButtonCell<>(cbCurrentUserAcctNum.getPromptText()));
		txtAmount.setVisible(false);
		btnTransferFunds.setVisible(false);
		btnResetCurrentUserAcctNum.setVisible(false);
	}
	
	@FXML
	public void clearSelectedAccountNumberValue(ActionEvent event) throws IOException {
		// TODO Autogenerated
		cbBenAccNums.getSelectionModel().clearSelection();
		cbBenAccNums.setButtonCell(new PromptButtonCell<>(cbBenAccNums.getPromptText()));
		btnResetAcctNum.setVisible(false);
		clearSelectedCurrentUserAccountNumberValue(event);
	}
	
	@FXML
	public void clearSelectedEmailValue(ActionEvent event) throws IOException {
		// TODO Autogenerated
		cbBenName.getSelectionModel().clearSelection();
		cbBenName.setButtonCell(new PromptButtonCell<>(cbBenName.getPromptText()));
		btnResetEmail.setVisible(false);
		cbBenAccNums.setVisible(false);
		cbCurrentUserAcctNum.setVisible(false);
		clearSelectedAccountNumberValue(event);
		
	}
	
	@Override
	public void initialize(URL arg0, ResourceBundle arg1) {
		// TODO Auto-generated method stub
		List<User> beneficiaryUsers = 
				BeneficiaryUsersDAO
				.getBeneficiaries(user.getUserId().toString())
				.stream()
				.map(beneficiaryUser -> {
					String beneficiaryUserId = beneficiaryUser.getBeneficiaryUserId().toString();
					User userDetails = UsersDAO.getUserById(beneficiaryUserId);
					return userDetails;
				})
				.collect(Collectors.toList());
		
		List<String> beneficiaryUserEmails = 
				beneficiaryUsers.stream()
				.map(beneficiaryUser -> beneficiaryUser.getEmail())
				.collect(Collectors.toList());
		
		ObservableList<String> beneficiaryUserEmailsList = 
        		FXCollections.observableArrayList(beneficiaryUserEmails);
		
		cbBenName.setItems(beneficiaryUserEmailsList);
		
		refreshState();
		cbBenAccNums.setVisible(false);
		btnTransferFunds.setVisible(false);
		txtAmount.setVisible(false);
		btnResetEmail.setVisible(false);
		btnResetAcctNum.setVisible(false);
		cbCurrentUserAcctNum.setVisible(false);
		btnResetCurrentUserAcctNum.setVisible(false);
	}
}
